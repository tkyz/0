#!/bin/bash
: << 'END_OF_BATCH'
@rem ================================ windows batch [ms932, crlf] ================================
@echo off

setlocal

  cd /d "%USERPROFILE%"

  set dist=debian

  wsl --unregister %dist%
  wsl --set-default-version 2
  wsl --install --distribution %dist%

  wsl --terminate    %dist%
  wsl --set-version  %dist% 2
  wsl --distribution %dist% -- sed -i 's#:/root:#:/mnt/c/Users/%USERNAME%:#' /etc/passwd
  wsl --distribution %dist% -- $^( wslpath -u %~0 ^)
  wsl --terminate    %dist%

endlocal
exit /b
END_OF_BATCH
# ================================ linux shell script [utf8, lf] ================================

set -o errexit
set -o nounset
set -o pipefail

(

  set -a
    source '/etc/os-release'
  set +a

  test 'debian' == "${ID_LIKE:-${ID}}"
  test 'bash'   == "${SHELL##*/}"

  #----------------------------------------------------------------
  # function

  function _deps() {
    (

#     echo "Acquire::http::Proxy \"http://apt.${domain}:3142/\";" | ${SUDO} tee '/etc/apt/apt.conf.d/00cache' > '/dev/null'

      keyring='/usr/share/keyrings/debian-archive-keyring.pgp'
      cat << EOS | ${SUDO} tee '/etc/apt/sources.list.d/org.debian.list' > '/dev/null'
deb     [signed-by=${keyring}] http://deb.debian.org/debian               ${VERSION_CODENAME}           main contrib non-free non-free-firmware
deb-src [signed-by=${keyring}] http://deb.debian.org/debian               ${VERSION_CODENAME}           main contrib non-free non-free-firmware
deb     [signed-by=${keyring}] http://deb.debian.org/debian               ${VERSION_CODENAME}-updates   main contrib non-free non-free-firmware
deb-src [signed-by=${keyring}] http://deb.debian.org/debian               ${VERSION_CODENAME}-updates   main contrib non-free non-free-firmware
deb     [signed-by=${keyring}] http://deb.debian.org/debian               ${VERSION_CODENAME}-backports main contrib non-free non-free-firmware
deb-src [signed-by=${keyring}] http://deb.debian.org/debian               ${VERSION_CODENAME}-backports main contrib non-free non-free-firmware
deb     [signed-by=${keyring}] http://security.debian.org/debian-security ${VERSION_CODENAME}-security  main contrib non-free non-free-firmware
deb-src [signed-by=${keyring}] http://security.debian.org/debian-security ${VERSION_CODENAME}-security  main contrib non-free non-free-firmware
#deb     [signed-by=${keyring}] http://deb.debian.org/debian               testing                       main contrib non-free non-free-firmware
#deb-src [signed-by=${keyring}] http://deb.debian.org/debian               testing                       main contrib non-free non-free-firmware
#deb     [signed-by=${keyring}] http://deb.debian.org/debian               unstable                      main contrib non-free non-free-firmware
#deb-src [signed-by=${keyring}] http://deb.debian.org/debian               unstable                      main contrib non-free non-free-firmware
#deb     [signed-by=${keyring}] http://deb.debian.org/debian               experimental                  main contrib non-free non-free-firmware
#deb-src [signed-by=${keyring}] http://deb.debian.org/debian               experimental                  main contrib non-free non-free-firmware
EOS

      ${SUDO} apt-get update
      ${SUDO} apt-get upgrade -y
      ${SUDO} apt-get install -y git

    )
  }

  function _git() {
    (

      git config --global init.defaultBranch main
      git config --global core.ignorecase    false
      git config --global core.quotepath     false
      git config --global core.autocrlf      false
      git config --global core.safecrlf      true
      git config --global core.filemode      true
      git config --global core.hooksPath     '~/.git-hooks'
      git config --global color.ui           auto
      git config --global color.diff         auto
      git config --global color.status       auto
      git config --global color.branch       auto
      git config --global pull.ff            only
      git config --global pull.rebase        true
      git config --global pull.autostash     false
      git config --global rebase.autostash   false
      git config --global merge.ff           false
      git config --global diff.sjis.textconv 'iconv -f sjis'
      git config --global filter.lfs.smudge  'git-lfs smudge --skip -- %f'
#     git config --global user.name          "${USER}"
#     git config --global user.email         "${USER}@$(hostname -f)"
      git config --global gpg.program        "$(type -p gpg)"
      git config --global commit.gpgsign     true

#     git init --object-format=sha256 .
      git init .

      git_remote='origin';    git_uri="${HOME}/lib/0.git/0.git";         git remote add "${git_remote}" "${git_uri}" || git remote set-url "${git_remote}" "${git_uri}" || true
      git_remote="${domain}"; git_uri="git://git.${domain}/0.git";       git remote add "${git_remote}" "${git_uri}" || git remote set-url "${git_remote}" "${git_uri}" || true
#     git_remote='github';    git_uri='ssh://git@github.com/tkyz/0.git'; git remote add "${git_remote}" "${git_uri}" || git remote set-url "${git_remote}" "${git_uri}" || true
      git_remote='public';    git_uri='https://github.com/tkyz/0.git';   git remote add "${git_remote}" "${git_uri}" || git remote set-url "${git_remote}" "${git_uri}" || true

      git fetch --prune --all || true

      git remote | while read remote; do
        git remote set-head "${remote}" 'main' || true
      done

      if git checkout --orphan 'main'; then
        git checkout -b 'main' 'origin/main'    ||
        git checkout -b 'main' "${domain}/main" ||
        git checkout -b 'main' 'public/main'    || true
      fi

      ( git reset --mixed 'origin/main'    && git branch --set-upstream-to='origin/main'    ) ||
      ( git reset --mixed "${domain}/main" && git branch --set-upstream-to="${domain}/main" ) ||
      ( git reset --mixed 'public/main'    && git branch --set-upstream-to='public/main'    )

      git diff --name-only -z --diff-filter=D | xargs -0 git checkout
      git remote | while read remote; do
        git rebase --no-autostash "${remote}" || true
      done

      git gc
      git status

    )
  }

  function _etc() {

    # /etc/default/keyboard
    cat << EOS | ${SUDO} tee '/etc/default/keyboard' > '/dev/null'
XKBMODEL=pc105
XKBLAYOUT=jp
XKBVARIANT=
XKBOPTIONS=ctrl:nocaps
BACKSPACE=guess
EOS

    # /etc/wsl.conf
    if is_wsl; then
      cat << EOS | ${SUDO} tee '/etc/wsl.conf' > '/dev/null'
[automount]
options            = "uid=0,gid=0,umask=0077,fmask=0177,metadata"
[network]
#generateResolvConf = false
[interop]
enabled            = false
appendWindowsPath  = false
[user]
default            = root
EOS
    fi

  }

  function _requirements_apt() {
    (

      ${SUDO} apt-get install -y $(cat './doc/requirements-apt.txt' | sed 's/#.*//' | xargs)

      cat './doc/requirements-apt-repo.txt' | sed -e 's/#.*//g' -e '/^$/d' | while read item; do

        item="$(  echo "${item}" | envsubst)"
        name="$(  echo "${item}" | sed -r 's/^([^ ]+)[ ]+([^ ]+)[ ]+(.*)$/\1/')"
        pub="$(   echo "${item}" | sed -r 's/^([^ ]+)[ ]+([^ ]+)[ ]+(.*)$/\2/')"
        source="$(echo "${item}" | sed -r 's/^([^ ]+)[ ]+([^ ]+)[ ]+(.*)$/\3/')"

        pub_file="/etc/apt/keyrings/${name}.gpg"
        src_file="/etc/apt/sources.list.d/${name}.list"

        curl -fsSL "${pub}"                          | ${SUDO} tee "${pub_file}" > '/dev/null'
        echo "deb [signed-by=${pub_file}] ${source}" | ${SUDO} tee "${src_file}" > '/dev/null'

      done

      ${SUDO} apt-get update
      ${SUDO} apt-get upgrade -y
#     ${SUDO} apt-get install -y $(cat './doc/requirements-apt-ext.txt' | sed 's/#.*//' | xargs)

    )
  }

  function _requirements_py() {
    (

      venv_dir='./.venv'
      req_file='./doc/requirements-py.txt'

      python3 -m venv "${venv_dir}"
      source "${venv_dir}/bin/activate"

      pip install --upgrade --requirement "${req_file}"

    )
  }

  function _requirements_src() {
    cat './doc/requirements-src.txt' | sed -e 's/#.*//g' -e '/^$/d' | while read item; do
      wpull "${item}"
    done
  }

  function _requirements_lib() {
    cat './doc/requirements-lib.txt' | sed -e 's/#.*//g' -e '/^$/d' | while read item; do
      wpull "${item}"
    done
  }

  function _requirements_opt() {
    cat './doc/requirements-opt.txt' | sed -e 's/#.*//g' -e '/^$/d' | while read item; do
      wpull "${item}"
    done
  }

  #----------------------------------------------------------------
  # main

  pushd "${HOME}" &> '/dev/null'

    domain="$(hostname -d)"

    if [[ '0' == "$(id -u)" ]]; then
      SUDO=
    elif type sudo &> '/dev/null' && sudo -v -n &> '/dev/null'; then
      SUDO='sudo'
    fi

    # 0.git
    if [[ ! -e './.git' ]]; then

      test -v SUDO

      _deps
      _git
      _requirements_apt

      git checkout '.profile' || true
      git checkout '.bashrc'  || true

    fi

    if [[ ! -v GENESIS_HASH ]]; then
      source './.profile'
    fi

    machine_id="$(machine_id)"
    boot_id="$(boot_id)"
    openpgp4fpr="$(openpgp4fpr)"

    mnt_dir='./mnt'
    mkdir -p  "${mnt_dir}"
    test ! -e "${mnt_dir}/${machine_id}" && test -v SUDO
    test ! -e "${mnt_dir}/${boot_id}"    && test -v SUDO
    test ! -e "${mnt_dir}/${machine_id}" && true           && _etc
    test ! -e "${mnt_dir}/${machine_id}" && true           && _requirements_py
    test ! -e "${mnt_dir}/${machine_id}" && ! is_container && _requirements_src
    test ! -e "${mnt_dir}/${boot_id}"    && ! is_container && mnt
    test ! -e "${mnt_dir}/${boot_id}"    && ! is_container && ${SUDO} nvidia-ctk cdi generate --output='/etc/cdi/nvidia.yaml'
    test ! -e "${mnt_dir}/${boot_id}"    && ! is_container && ${SUDO} modprobe -r pn533_usb pn533 nfc
    test ! -e "${mnt_dir}/${boot_id}"    && ! is_container && git config --global user.signingkey "$(gpg --with-colons --list-secret-keys "0x${openpgp4fpr}" | grep -A 1 :s: | grep ^fpr: | cut -d : -f 10)"
    test ! -e "${mnt_dir}/${machine_id}" && ! is_container && winetricks cjkfonts
    test ! -e "${mnt_dir}/${machine_id}" && ! is_container && _requirements_lib
    test ! -e "${mnt_dir}/${machine_id}" && ! is_container && _requirements_opt
    test ! -e "${mnt_dir}/${machine_id}" && ! is_container && build
    test ! -e "${mnt_dir}/${boot_id}"    && true           && exp
    test ! -e "${mnt_dir}/${boot_id}"    && true           && license > './LICENSE'
    mkdir -p  "${mnt_dir}/${machine_id}"
    mkdir -p  "${mnt_dir}/${boot_id}"

  popd &> '/dev/null'

)
